@use '../styles/variables.scss' as *;

.contactFloating {
  // Posicionamento de pseudo-section flutuante
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: center;
  transform: translate(0px, -50px);
  
  // Garantir que não interfira no fluxo das outras sections
  pointer-events: none;
  
  // Estado visível sem animação - sempre visível
  opacity: 1;
  
  .contactContent {
    // Reativar pointer-events apenas no conteúdo
    pointer-events: all;
    width: 100%;
    margin: 0 auto;
    padding: 1.2rem;
    box-sizing: border-box;
    display: flex;
    justify-content: center;
    position: relative;
    overflow: hidden;
    
    // Visual glassmorphism aprimorado
    background: linear-gradient(
      145deg,
      rgba(255, 255, 255, 0.98) 0%,
      rgba(255, 255, 255, 0.95) 30%,
      rgba(240, 248, 255, 0.98) 70%,
      rgba(255, 255, 255, 0.96) 100%
    );
    -webkit-backdrop-filter: blur(30px);
    backdrop-filter: blur(30px);
    box-shadow: 
      0 25px 50px rgba(0, 0, 0, 0.08),
      0 15px 30px rgba(79, 140, 255, 0.08),
      0 8px 20px rgba(0, 0, 0, 0.06),
      0 3px 15px rgba(79, 140, 255, 0.04),
      inset 0 2px 0 rgba(255, 255, 255, 0.95),
      inset 0 -1px 0 rgba(79, 140, 255, 0.1);
    border: 1px solid rgba(255, 255, 255, 0.6);
    
    // Borda estática sem animação
    &::before {
      content: '';
      position: absolute;
      inset: 0;
      padding: 2px;
      background: linear-gradient(
        135deg, 
        rgba(79, 140, 255, 0.3) 0%,
        rgba(255, 255, 255, 0.4) 25%,
        rgba(79, 140, 255, 0.2) 50%,
        rgba(255, 255, 255, 0.4) 75%,
        rgba(79, 140, 255, 0.3) 100%
      );
      -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
      -webkit-mask-composite: subtract;
      mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
      mask-composite: subtract;
      pointer-events: none;
    }
    
    // Efeito de brilho adicional
    &::after {
      content: '';
      position: absolute;
      top: 10%;
      left: 10%;
      right: 10%;
      height: 40%;
      background: linear-gradient(
        to bottom,
        rgba(255, 255, 255, 0.8) 0%,
        rgba(255, 255, 255, 0.2) 50%,
        transparent 100%
      );
      border-radius: 1rem 1rem 2rem 2rem;
      pointer-events: none;
      opacity: 0.7;
    }
    @media screen and (max-width: 480px) {
      padding: 1rem;
        
    }
    
  }
}

.contactInner {
  display: flex;
  flex-direction: column;
  gap: 0;
  width: 100%;
  max-width: 1200px;
  box-sizing: border-box;
  
  // Animações apenas no contactInner
  opacity: 0;
  transform: translateY(20px);
  transition: all 0.8s cubic-bezier(0.4, 0.0, 0.2, 1);
}

// Estado visível para contactInner
.contactVisible .contactInner {
  opacity: 1;
  transform: translateY(0);
}

.contactGrid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 0.8rem;
  
  @media (max-width: 768px) {
   
    gap: 0.6rem;
  }
  
  @media (max-width: 480px) {
   
    gap: 0.5rem;
  }
}

.contactButton {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.7rem;
  padding: 1rem 1.2rem;
  background: linear-gradient(
    145deg,
    rgba(255, 255, 255, 0.95) 0%,
    rgba(255, 255, 255, 0.8) 100%
  );
  border: 1px solid rgba(255, 255, 255, 0.4);
  border-radius: 1rem;
  text-decoration: none;
  color: $color-text-dark;
  font-weight: 600;
  font-size: 0.9rem;
  transition: all 0.4s cubic-bezier(0.4, 0.0, 0.2, 1);
  position: relative;
  overflow: hidden;
  -webkit-backdrop-filter: blur(10px);
  backdrop-filter: blur(10px);
  box-shadow: 
    0 4px 15px rgba(0, 0, 0, 0.08),
    0 2px 8px rgba(79, 140, 255, 0.06),
    inset 0 1px 0 rgba(255, 255, 255, 0.8);
  
  &::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(
      135deg,
      rgba(79, 140, 255, 0.15),
      rgba(255, 255, 255, 0.2)
    );
    opacity: 0;
    transition: all 0.4s ease;
    border-radius: 1rem;
  }
  
  // Micro-shimmer effect
  &::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.4),
      transparent
    );
    transition: left 0.6s ease;
  }
  
  &:hover {
    transform: translateY(-3px) scale(1.05);
    box-shadow: 
      0 12px 30px rgba(0, 0, 0, 0.12),
      0 6px 15px rgba(79, 140, 255, 0.15),
      inset 0 1px 0 rgba(255, 255, 255, 0.9);
    color: white;
    border-color: rgba(255, 255, 255, 0.6);
    
    &::before {
      opacity: 1;
    }
    
    &::after {
      left: 100%;
    }
    
    .buttonIcon,
    .buttonLabel {
      position: relative;
      z-index: 1;
      color: inherit;
    }
  }
  
  &:active {
    transform: translateY(-1px) scale(1.02);
  }
  
  @media (max-width: 768px) {
    padding: 0.7rem 0.8rem;
    font-size: 0.75rem;
    gap: 0.5rem;
  }
  @media screen and (max-width: 480px) {
    flex-direction: column;
    padding: .5rem;
  }
}

.buttonIcon {
  font-size: 1.2rem;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.4s cubic-bezier(0.4, 0.0, 0.2, 1);
  
  // Estilos específicos para ícones do React Icons
  svg {
    width: 1.2rem;
    height: 1.2rem;
    transition: inherit;
    fill: currentColor;
  }
  
  .contactButton:hover & {
    transform: scale(1.15) rotate(5deg);
    
    svg {
      filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.2));
    }
  }
  
  @media (max-width: 768px) {
    font-size: 1rem;
    
    svg {
      width: 1rem;
      height: 1rem;
    }
  }
}

.buttonLabel {
  font-weight: 600;
  white-space: nowrap;
  letter-spacing: 0.025em;
  transition: all 0.4s ease;
  
  .contactButton:hover & {
    letter-spacing: 0.05em;
  }
  
  @media (max-width: 480px) {
    display: none;
  }
}

// Animação de entrada escalonada para os botões com efeito mais suave
.contactGrid .contactButton {
  animation: slideInUpEnhanced 0.8s cubic-bezier(0.4, 0.0, 0.2, 1);
  animation-fill-mode: both;
  
  @for $i from 1 through 4 {
    &:nth-child(#{$i}) {
      animation-delay: #{$i * 0.15}s;
    }
  }
}

@keyframes slideInUpEnhanced {
  0% {
    opacity: 0;
    transform: translateY(30px) scale(0.9);
  }
  50% {
    opacity: 0.5;
    transform: translateY(10px) scale(0.95);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}


// Classes específicas para cada tipo de contato com cores mais vibrantes
.contactWhatsApp {
  &:hover {
    background: linear-gradient(135deg, #25D366, #128C7E);
    box-shadow: 
      0 12px 30px rgba(0, 0, 0, 0.12),
      0 6px 15px rgba(37, 211, 102, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
    
    &::before {
      background: linear-gradient(135deg, rgba(37, 211, 102, 0.3), rgba(255, 255, 255, 0.2));
    }
    
    .buttonIcon svg {
      color: #ffffff;
    }
  }
}

.contactLinkedIn {
  &:hover {
    background: linear-gradient(135deg, #0077B5, #005885);
    box-shadow: 
      0 12px 30px rgba(0, 0, 0, 0.12),
      0 6px 15px rgba(0, 119, 181, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
    
    &::before {
      background: linear-gradient(135deg, rgba(0, 119, 181, 0.3), rgba(255, 255, 255, 0.2));
    }
    
    .buttonIcon svg {
      color: #ffffff;
    }
  }
}

.contactGitHub {
  &:hover {
    background: linear-gradient(135deg, #333, #1a1a1a);
    box-shadow: 
      0 12px 30px rgba(0, 0, 0, 0.12),
      0 6px 15px rgba(51, 51, 51, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
    
    &::before {
      background: linear-gradient(135deg, rgba(51, 51, 51, 0.3), rgba(255, 255, 255, 0.2));
    }
    
    .buttonIcon svg {
      color: #ffffff;
    }
  }
}

.contactEmail {
  &:hover {
    background: linear-gradient(135deg, #EA4335, #C23321);
    box-shadow: 
      0 12px 30px rgba(0, 0, 0, 0.12),
      0 6px 15px rgba(234, 67, 53, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.3);
    
    &::before {
      background: linear-gradient(135deg, rgba(234, 67, 53, 0.3), rgba(255, 255, 255, 0.2));
    }
    
    .buttonIcon svg {
      color: #ffffff;
    }
  }
}
