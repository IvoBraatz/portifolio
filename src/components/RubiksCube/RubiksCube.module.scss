// Container principal do cubo
.cubeContainer {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 400px;
  padding: 2rem;
  perspective: 1200px;
  perspective-origin: center center;
}

// Container do cubo 3D - configuração correta para manter 3D
.cube {
  position: relative;
  width: 180px;
  height: 180px;
  transform-style: preserve-3d;
  transform-origin: 50% 50% 50%;
  animation: autoRotate 60s linear infinite;
  // Mantém o tamanho fixo durante rotações
  backface-visibility: visible;
  
  // Garantir que todos os filhos mantenham 3D
  * {
    transform-style: preserve-3d;
    backface-visibility: visible;
  }
}

// Animação de rotação automática mais lenta
@keyframes autoRotate {
  0% { transform: rotateX(15deg) rotateY(0deg) rotateZ(0deg); }
  100% { transform: rotateX(15deg) rotateY(360deg) rotateZ(0deg); }
}

// Animações específicas para rotação de camadas - mais lentas e suaves
// Rotação no eixo X (sentido horário)
.rotateXCW {
  animation: layerRotateXCW 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  transform-origin: center center center;
}

// Rotação no eixo X (sentido anti-horário)
.rotateXCCW {
  animation: layerRotateXCCW 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  transform-origin: center center center;
}

// Rotação no eixo Y (sentido horário)
.rotateYCW {
  animation: layerRotateYCW 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  transform-origin: center center center;
}

// Rotação no eixo Y (sentido anti-horário)
.rotateYCCW {
  animation: layerRotateYCCW 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  transform-origin: center center center;
}

// Rotação no eixo Z (sentido horário)
.rotateZCW {
  animation: layerRotateZCW 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  transform-origin: center center center;
}

// Rotação no eixo Z (sentido anti-horário)
.rotateZCCW {
  animation: layerRotateZCCW 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards;
  transform-origin: center center center;
}

// Keyframes para rotações de camadas - mantém tamanho fixo
@keyframes layerRotateXCW {
  0% { 
    transform: rotateX(0deg) scale3d(1, 1, 1); 
  }
  100% { 
    transform: rotateX(90deg) scale3d(1, 1, 1); 
  }
}

@keyframes layerRotateXCCW {
  0% { 
    transform: rotateX(0deg) scale3d(1, 1, 1); 
  }
  100% { 
    transform: rotateX(-90deg) scale3d(1, 1, 1); 
  }
}

@keyframes layerRotateYCW {
  0% { 
    transform: rotateY(0deg) scale3d(1, 1, 1); 
  }
  100% { 
    transform: rotateY(90deg) scale3d(1, 1, 1); 
  }
}

@keyframes layerRotateYCCW {
  0% { 
    transform: rotateY(0deg) scale3d(1, 1, 1); 
  }
  100% { 
    transform: rotateY(-90deg) scale3d(1, 1, 1); 
  }
}

@keyframes layerRotateZCW {
  0% { 
    transform: rotateZ(0deg) scale3d(1, 1, 1); 
  }
  100% { 
    transform: rotateZ(90deg) scale3d(1, 1, 1); 
  }
}

@keyframes layerRotateZCCW {
  0% { 
    transform: rotateZ(0deg) scale3d(1, 1, 1); 
  }
  100% { 
    transform: rotateZ(-90deg) scale3d(1, 1, 1); 
  }
}

// Responsividade - adaptação para diferentes tamanhos de tela
@media (max-width: 1200px) {
  .cubeContainer {
    perspective: 1000px;
  }
  
  .cube {
    width: 160px;
    height: 160px;
  }
}

@media (max-width: 768px) {
  .cubeContainer {
    min-height: 300px;
    padding: 1rem;
    perspective: 800px;
  }
  
  .cube {
    width: 140px;
    height: 140px;
  }
}

@media (max-width: 480px) {
  .cubeContainer {
    min-height: 250px;
    padding: 0.5rem;
    perspective: 600px;
  }
  
  .cube {
    width: 120px;
    height: 120px;
  }
}

// Estilo para prevenir quebras de layout
.cubeContainer * {
  box-sizing: border-box;
}

// Garantir que o cubo mantenha suas proporções 3D
.cube > * {
  transform-style: preserve-3d;
  backface-visibility: visible;
}
